// Code generated by MockGen. DO NOT EDIT.
// Source: /home/roma/roma/LoudyBack/internal/services/content/init.go

// Package mock_content is a generated GoMock package.
package mock_content

import (
	context "context"
	content "loudy-back/internal/domain/models/content"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockContentProvider is a mock of ContentProvider interface.
type MockContentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockContentProviderMockRecorder
}

// MockContentProviderMockRecorder is the mock recorder for MockContentProvider.
type MockContentProviderMockRecorder struct {
	mock *MockContentProvider
}

// NewMockContentProvider creates a new mock instance.
func NewMockContentProvider(ctrl *gomock.Controller) *MockContentProvider {
	mock := &MockContentProvider{ctrl: ctrl}
	mock.recorder = &MockContentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentProvider) EXPECT() *MockContentProviderMockRecorder {
	return m.recorder
}

// Album mocks base method.
func (m *MockContentProvider) Album(ctx context.Context, id primitive.ObjectID) (content.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Album", ctx, id)
	ret0, _ := ret[0].(content.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Album indicates an expected call of Album.
func (mr *MockContentProviderMockRecorder) Album(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Album", reflect.TypeOf((*MockContentProvider)(nil).Album), ctx, id)
}

// Artist mocks base method.
func (m *MockContentProvider) Artist(ctx context.Context, name string) (content.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Artist", ctx, name)
	ret0, _ := ret[0].(content.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Artist indicates an expected call of Artist.
func (mr *MockContentProviderMockRecorder) Artist(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Artist", reflect.TypeOf((*MockContentProvider)(nil).Artist), ctx, name)
}

// SearchContent mocks base method.
func (m *MockContentProvider) SearchContent(ctx context.Context, input string) ([]content.ArtistLight, []content.AlbumLight, []content.TrackLight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContent", ctx, input)
	ret0, _ := ret[0].([]content.ArtistLight)
	ret1, _ := ret[1].([]content.AlbumLight)
	ret2, _ := ret[2].([]content.TrackLight)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SearchContent indicates an expected call of SearchContent.
func (mr *MockContentProviderMockRecorder) SearchContent(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContent", reflect.TypeOf((*MockContentProvider)(nil).SearchContent), ctx, input)
}

// MockContentCreator is a mock of ContentCreator interface.
type MockContentCreator struct {
	ctrl     *gomock.Controller
	recorder *MockContentCreatorMockRecorder
}

// MockContentCreatorMockRecorder is the mock recorder for MockContentCreator.
type MockContentCreatorMockRecorder struct {
	mock *MockContentCreator
}

// NewMockContentCreator creates a new mock instance.
func NewMockContentCreator(ctrl *gomock.Controller) *MockContentCreator {
	mock := &MockContentCreator{ctrl: ctrl}
	mock.recorder = &MockContentCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentCreator) EXPECT() *MockContentCreatorMockRecorder {
	return m.recorder
}

// CreateAlbum mocks base method.
func (m *MockContentCreator) CreateAlbum(ctx context.Context, name, cover string, tracksIds []content.TrackLight, releaseDate time.Time) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlbum", ctx, name, cover, tracksIds, releaseDate)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlbum indicates an expected call of CreateAlbum.
func (mr *MockContentCreatorMockRecorder) CreateAlbum(ctx, name, cover, tracksIds, releaseDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlbum", reflect.TypeOf((*MockContentCreator)(nil).CreateAlbum), ctx, name, cover, tracksIds, releaseDate)
}

// CreateArtist mocks base method.
func (m *MockContentCreator) CreateArtist(ctx context.Context, name, cover, bio string) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtist", ctx, name, cover, bio)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArtist indicates an expected call of CreateArtist.
func (mr *MockContentCreatorMockRecorder) CreateArtist(ctx, name, cover, bio interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockContentCreator)(nil).CreateArtist), ctx, name, cover, bio)
}

// CreateTrack mocks base method.
func (m *MockContentCreator) CreateTrack(ctx context.Context, name, file string, albumId primitive.ObjectID) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrack", ctx, name, file, albumId)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrack indicates an expected call of CreateTrack.
func (mr *MockContentCreatorMockRecorder) CreateTrack(ctx, name, file, albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrack", reflect.TypeOf((*MockContentCreator)(nil).CreateTrack), ctx, name, file, albumId)
}
